(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-524d9710"],{"1ad5":function(e,n,t){"use strict";t.r(n);var a=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("p",{staticClass:"tip"},[e._v(" 基于树表格实现分组汇总合计 ")]),t("vxe-toolbar",{scopedSlots:e._u([{key:"buttons",fn:function(){return[t("vxe-button",{on:{click:function(n){return e.$refs.xTree.setAllTreeExpand(!0)}}},[e._v("展开所有")]),t("vxe-button",{on:{click:function(n){return e.$refs.xTree.clearTreeExpand()}}},[e._v("关闭所有")])]},proxy:!0}])}),t("vxe-table",{ref:"xTree",attrs:{resizable:"","show-footer":"","max-height":"400",loading:e.loading,"tree-config":e.tableTreeConfig,"span-method":e.colspanMethod,"footer-method":e.footerMethod,data:e.tableData}},[t("vxe-column",{attrs:{field:"name",title:"名称","tree-node":"",formatter:e.formatName}}),t("vxe-column",{attrs:{field:"level",title:"级别"}}),t("vxe-column",{attrs:{field:"age",title:"年龄"}}),t("vxe-column",{attrs:{field:"rate",title:"分数"}})],1),t("p",{staticClass:"demo-code"},[e._v(e._s(e.$t("app.body.button.showCode")))]),t("pre",[e._v("    "),t("pre-code",{staticClass:"xml"},[e._v(e._s(e.demoCodes[0]))]),e._v("\n    "),t("pre-code",{staticClass:"javascript"},[e._v(e._s(e.demoCodes[1]))]),e._v("\n  ")],1)],1)},r=[],l=(t("d3b7"),t("99af"),t("b0c0"),t("159b"),t("a9e3"),t("d81d"),t("c695")),o=t.n(l),i={data:function(){return{loading:!1,tableData:[],tableTreeConfig:{children:"children",accordion:!0,expandAll:!1},demoCodes:['\n        <vxe-toolbar>\n          <template #buttons>\n            <vxe-button @click="$refs.xTree.setAllTreeExpand(true)">展开所有</vxe-button>\n            <vxe-button @click="$refs.xTree.clearTreeExpand()">关闭所有</vxe-button>\n          </template>\n        </vxe-toolbar>\n\n        <vxe-table\n          resizable\n          show-footer\n          ref="xTree"\n          max-height="400"\n          :loading="loading"\n          :tree-config="tableTreeConfig"\n          :span-method="colspanMethod"\n          :footer-method="footerMethod"\n          :data="tableData">\n          <vxe-column field="name" title="名称" tree-node :formatter="formatName"></vxe-column>\n          <vxe-column field="level" title="级别"></vxe-column>\n          <vxe-column field="age" title="年龄"></vxe-column>\n          <vxe-column field="rate" title="分数"></vxe-column>\n        </vxe-table>\n        ',"\n        import XEUtils from 'xe-utils'\n        \n        export default {\n          data () {\n            return {\n              loading: false,\n              tableData: [],\n              tableTreeConfig: {\n                children: 'children',\n                accordion: true, // 一层只允许展开一个节点\n                expandAll: false // 默认是否全部展开\n              }\n            }\n          },\n          created () {\n            this.loading = true\n            this.findList().then(data => {\n              this.tableData = this.getGroupSummary(data)\n              this.loading = false\n            })\n          },\n          methods: {\n            findList () {\n              return new Promise(resolve => {\n                setTimeout(() => {\n                  let list = [\n                    {\n                      name: '一班',\n                      level: '',\n                      age: '',\n                      rate: '',\n                      children: [\n                        { name: 'test7', rate: 9, age: 24, level: 1 },\n                        { name: 'test6', rate: 14, age: 20, level: 3 },\n                        {\n                          name: '第一组',\n                          level: '',\n                          age: '',\n                          rate: '',\n                          children: [\n                            { name: 'test85', rate: 13, age: 32, level: 1 },\n                            { name: 'test37', rate: 9, age: 29, level: 4 },\n                            { name: 'test93', rate: 22, age: 28, level: 5 },\n                            { name: 'test90', rate: 55, age: 26, level: 2 }\n                          ]\n                        },\n                        { name: 'test32', rate: 11, age: 21, level: 1 }\n                      ]\n                    },\n                    {\n                      name: '二班',\n                      level: '',\n                      age: '',\n                      rate: '',\n                      children: [\n                        { name: 'test15', rate: 13, age: 32, level: 1 },\n                        { name: 'test44', rate: 9, age: 29, level: 4 },\n                        {\n                          name: '第一组',\n                          level: '',\n                          age: '',\n                          rate: '',\n                          children: [\n                            { name: 'test37', rate: 9, age: 29, level: 4 },\n                            { name: 'test93', rate: 22, age: 28, level: 5 }\n                          ]\n                        },\n                        {\n                          name: '第二组',\n                          level: '',\n                          age: '',\n                          rate: '',\n                          children: [\n                            { name: 'test74', rate: 11, age: 32, level: 5 },\n                            { name: 'test99', rate: 23, age: 18, level: 4 },\n                            {\n                              name: '第一排',\n                              level: '',\n                              age: '',\n                              rate: '',\n                              children: [\n                                { name: 'test48', rate: 77, age: 29, level: 4 },\n                                { name: 'test38', rate: 34, age: 21, level: 2 }\n                              ]\n                            },\n                            { name: 'test16', rate: 22, age: 26, level: 5 }\n                          ]\n                        },\n                        { name: 'test91', rate: 16, age: 27, level: 5 },\n                        {\n                          name: '第三组',\n                          level: '',\n                          age: '',\n                          rate: '',\n                          children: [\n                            { name: 'test77', rate: 11, age: 35, level: 1 },\n                            { name: 'test89', rate: 40, age: 18, level: 4 },\n                            { name: 'test10', rate: 22, age: 20, level: 2 }\n                          ]\n                        }\n                      ]\n                    },\n                    {\n                      name: '三班',\n                      level: '',\n                      age: '',\n                      rate: '',\n                      children: [\n                        { name: 'test6', rate: 3, age: 22, level: 2 },\n                        { name: 'test2', rate: 5, age: 25, level: 3 },\n                        { name: 'test42', rate: 17, age: 35, level: 4 }\n                      ]\n                    }\n                  ]\n                  resolve(list)\n                }, 300)\n              })\n            },\n            formatName ({ row }) {\n              return row.children && row.children.length ? `${row.name} (${row.num}人)` : row.name\n            },\n            meanNum (list, field) {\n              let count = 0\n              list.forEach(item => {\n                count += Number(item[field])\n              })\n              return count / list.length\n            },\n            sumNum (list, field) {\n              let count = 0\n              list.forEach(item => {\n                count += Number(item[field])\n              })\n              return count\n            },\n            // 计算逻辑\n            handleSummary  (children) {\n              return {\n                num: this.sumNum(children, 'num'),\n                level: Math.floor(this.sumNum(children, 'level')),\n                age: parseInt(this.meanNum(children, 'age')),\n                rate: this.sumNum(children, 'rate')\n              }\n            },\n            getGroupSummary (data) {\n              XEUtils.eachTree(data, (row, index, items, path, parent, nodes) => {\n                let children = row.children\n                if (children && children.length) {\n                  // 合计子节点\n                  Object.assign(row, this.handleSummary(children))\n                } else {\n                  row.num = 1\n                  if (index === items.length - 1) {\n                    // 全量汇总\n                    for (let len = nodes.length - 2; len >= 0; len--) {\n                      Object.assign(nodes[len], this.handleSummary(nodes[len].children))\n                    }\n                  }\n                }\n              }, this.tableTreeConfig)\n              XEUtils.eachTree(data, (row) => {\n                let children = row.children\n                if (children && children.length) {\n                  // 动态增加一行汇总\n                  children.push({\n                    name: `合计 (${row.name})`,\n                    level: row.level,\n                    age: row.age,\n                    rate: row.rate\n                  })\n                }\n              }, this.tableTreeConfig)\n              return data\n            },\n            colspanMethod ({ row, column }) {\n              // 当行被展开时将行合并\n              let xTree = this.$refs.xTree\n              if (row.children && row.children.length && xTree && xTree.isTreeExpandByRow(row)) {\n                if (column.treeNode) {\n                  return {\n                    rowspan: 1,\n                    colspan: 4\n                  }\n                } else {\n                  return {\n                    rowspan: 0,\n                    colspan: 0\n                  }\n                }\n              }\n            },\n            footerMethod ({ columns, data }) {\n              return [\n                columns.map((column, columnIndex) => {\n                  if (columnIndex === 0) {\n                    return `合计 (${this.sumNum(data, 'num')}人)`\n                  }\n                  switch (column.property) {\n                    case 'level':\n                      return `总共 ${Math.floor(this.meanNum(data, 'level'))}`\n                    case 'age':\n                      return `平均年龄 ${parseInt(this.meanNum(data, 'age'))}`\n                    case 'rate':\n                      return `总分 ${this.sumNum(data, 'rate')}`\n                  }\n                  return '-'\n                })\n              ]\n            }\n          }\n        }\n        "]}},created:function(){var e=this;this.loading=!0,this.findList().then((function(n){e.tableData=e.getGroupSummary(n),e.loading=!1}))},methods:{findList:function(){return new Promise((function(e){setTimeout((function(){var n=[{name:"一班",level:"",age:"",rate:"",children:[{name:"test7",rate:9,age:24,level:1},{name:"test6",rate:14,age:20,level:3},{name:"第一组",level:"",age:"",rate:"",children:[{name:"test85",rate:13,age:32,level:1},{name:"test37",rate:9,age:29,level:4},{name:"test93",rate:22,age:28,level:5},{name:"test90",rate:55,age:26,level:2}]},{name:"test32",rate:11,age:21,level:1}]},{name:"二班",level:"",age:"",rate:"",children:[{name:"test15",rate:13,age:32,level:1},{name:"test44",rate:9,age:29,level:4},{name:"第一组",level:"",age:"",rate:"",children:[{name:"test37",rate:9,age:29,level:4},{name:"test93",rate:22,age:28,level:5}]},{name:"第二组",level:"",age:"",rate:"",children:[{name:"test74",rate:11,age:32,level:5},{name:"test99",rate:23,age:18,level:4},{name:"第一排",level:"",age:"",rate:"",children:[{name:"test48",rate:77,age:29,level:4},{name:"test38",rate:34,age:21,level:2}]},{name:"test16",rate:22,age:26,level:5}]},{name:"test91",rate:16,age:27,level:5},{name:"第三组",level:"",age:"",rate:"",children:[{name:"test77",rate:11,age:35,level:1},{name:"test89",rate:40,age:18,level:4},{name:"test10",rate:22,age:20,level:2}]}]},{name:"三班",level:"",age:"",rate:"",children:[{name:"test6",rate:3,age:22,level:2},{name:"test2",rate:5,age:25,level:3},{name:"test42",rate:17,age:35,level:4}]}];e(n)}),300)}))},formatName:function(e){var n=e.row;return n.children&&n.children.length?"".concat(n.name," (").concat(n.num,"人)"):n.name},meanNum:function(e,n){var t=0;return e.forEach((function(e){t+=Number(e[n])})),t/e.length},sumNum:function(e,n){var t=0;return e.forEach((function(e){t+=Number(e[n])})),t},handleSummary:function(e){return{num:this.sumNum(e,"num"),level:Math.floor(this.sumNum(e,"level")),age:parseInt(this.meanNum(e,"age")),rate:this.sumNum(e,"rate")}},getGroupSummary:function(e){var n=this;return o.a.eachTree(e,(function(e,t,a,r,l,o){var i=e.children;if(i&&i.length)Object.assign(e,n.handleSummary(i));else if(e.num=1,t===a.length-1)for(var s=o.length-2;s>=0;s--)Object.assign(o[s],n.handleSummary(o[s].children))}),this.tableTreeConfig),o.a.eachTree(e,(function(e){var n=e.children;n&&n.length&&n.push({name:"合计 (".concat(e.name,")"),level:e.level,age:e.age,rate:e.rate})}),this.tableTreeConfig),e},colspanMethod:function(e){var n=e.row,t=e.column,a=this.$refs.xTree;if(n.children&&n.children.length&&a&&a.isTreeExpandByRow(n))return t.treeNode?{rowspan:1,colspan:4}:{rowspan:0,colspan:0}},footerMethod:function(e){var n=this,t=e.columns,a=e.data;return[t.map((function(e,t){if(0===t)return"合计 (".concat(n.sumNum(a,"num"),"人)");switch(e.property){case"level":return"总共 ".concat(Math.floor(n.meanNum(a,"level")));case"age":return"平均年龄 ".concat(parseInt(n.meanNum(a,"age")));case"rate":return"总分 ".concat(n.sumNum(a,"rate"))}return"-"}))]}}},s=i,m=t("2877"),c=Object(m["a"])(s,a,r,!1,null,null,null);n["default"]=c.exports},"99af":function(e,n,t){"use strict";var a=t("23e7"),r=t("da84"),l=t("d039"),o=t("e8b5"),i=t("861d"),s=t("7b0b"),m=t("07fa"),c=t("8418"),u=t("65f0"),d=t("1dde"),h=t("b622"),f=t("2d00"),v=h("isConcatSpreadable"),g=9007199254740991,p="Maximum allowed index exceeded",b=r.TypeError,x=f>=51||!l((function(){var e=[];return e[v]=!1,e.concat()[0]!==e})),N=d("concat"),w=function(e){if(!i(e))return!1;var n=e[v];return void 0!==n?!!n:o(e)},T=!x||!N;a({target:"Array",proto:!0,forced:T},{concat:function(e){var n,t,a,r,l,o=s(this),i=u(o,0),d=0;for(n=-1,a=arguments.length;n<a;n++)if(l=-1===n?o:arguments[n],w(l)){if(r=m(l),d+r>g)throw b(p);for(t=0;t<r;t++,d++)t in l&&c(i,d,l[t])}else{if(d>=g)throw b(p);c(i,d++,l)}return i.length=d,i}})},a9e3:function(e,n,t){"use strict";var a=t("83ab"),r=t("da84"),l=t("e330"),o=t("94ca"),i=t("6eeb"),s=t("1a2d"),m=t("7156"),c=t("3a9b"),u=t("d9b5"),d=t("c04e"),h=t("d039"),f=t("241c").f,v=t("06cf").f,g=t("9bf2").f,p=t("408a"),b=t("58a8").trim,x="Number",N=r[x],w=N.prototype,T=r.TypeError,E=l("".slice),y=l("".charCodeAt),I=function(e){var n=d(e,"number");return"bigint"==typeof n?n:_(n)},_=function(e){var n,t,a,r,l,o,i,s,m=d(e,"number");if(u(m))throw T("Cannot convert a Symbol value to a number");if("string"==typeof m&&m.length>2)if(m=b(m),n=y(m,0),43===n||45===n){if(t=y(m,2),88===t||120===t)return NaN}else if(48===n){switch(y(m,1)){case 66:case 98:a=2,r=49;break;case 79:case 111:a=8,r=55;break;default:return+m}for(l=E(m,2),o=l.length,i=0;i<o;i++)if(s=y(l,i),s<48||s>r)return NaN;return parseInt(l,a)}return+m};if(o(x,!N(" 0o1")||!N("0b1")||N("+0x1"))){for(var C,S=function(e){var n=arguments.length<1?0:N(I(e)),t=this;return c(w,t)&&h((function(){p(t)}))?m(Object(n),t,S):n},M=a?f(N):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),$=0;M.length>$;$++)s(N,C=M[$])&&!s(S,C)&&g(S,C,v(N,C));S.prototype=w,w.constructor=S,i(r,x,S)}}}]);