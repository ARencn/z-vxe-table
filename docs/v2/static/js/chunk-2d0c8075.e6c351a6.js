(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c8075"],{"52ac":function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",[n._m(0),t("vxe-virtual-tree",{ref:"xVTree",attrs:{resizable:"","show-overflow":"","show-header-overflow":"","row-key":"",height:"500",loading:n.loading,"toolbar-config":{slots:{buttons:"toolbar_buttons"}},"radio-config":{labelField:"name"},"tree-config":{children:"children"}},scopedSlots:n._u([{key:"toolbar_buttons",fn:function(){return[t("vxe-button",{on:{click:function(e){return n.loadColumnAndData(1e3,5e3)}}},[n._v("1k列5k条")]),t("vxe-button",{on:{click:function(e){return n.loadColumnAndData(1e3,1e4)}}},[n._v("1k列1w条")]),t("vxe-button",{on:{click:function(e){return n.loadColumnAndData(1e3,2e4)}}},[n._v("1k列2w条")]),t("vxe-button",{on:{click:function(e){return n.loadColumnAndData(2e3,1e4)}}},[n._v("2k列1w条")]),t("vxe-button",{on:{click:function(e){return n.loadColumnAndData(5e3,5e3)}}},[n._v("5k列5k条")]),t("vxe-button",{on:{click:function(e){return n.loadColumnAndData(5e3,1e4)}}},[n._v("5k列1w条")]),t("vxe-button",{on:{click:function(e){return n.loadColumnAndData(5e3,2e4)}}},[n._v("5k列2w条")]),t("vxe-button",{on:{click:function(e){return n.$refs.xVTree.setAllTreeExpand(!0)}}},[n._v("展开所有")]),t("vxe-button",{on:{click:function(e){return n.$refs.xVTree.setAllTreeExpand(!1)}}},[n._v("收起所有")]),t("vxe-button",{on:{click:n.getRadioEvent}},[n._v("获取选中")])]},proxy:!0}])}),t("p",{staticClass:"demo-code"},[n._v(n._s(n.$t("app.body.button.showCode")))]),t("pre",[n._v("    "),t("code",{staticClass:"xml"},[n._v(n._s(n.demoCodes[0]))]),n._v("\n    "),t("code",{staticClass:"javascript"},[n._v(n._s(n.demoCodes[1]))]),n._v("\n  ")])],1)},i=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("p",{staticClass:"tip"},[n._v(" 树形虚拟滚动渲染"),t("span",{staticClass:"orange"},[n._v("（最大可以支撑 1w 列、20w 行）")]),n._v("，具体兼容请查看 "),t("a",{staticClass:"link",attrs:{href:"https://github.com/x-extends/vxe-table-plugin-virtual-tree/tree/v2",target:"_blank"}},[n._v("vxe-table-plugin-virtual-tree")]),n._v(" 插件的 API"),t("br"),t("span",{staticClass:"red"},[n._v("（注：启用纵向虚拟滚的后不支持动态行高）")])])}],a=(t("d3b7"),t("159b"),t("a630"),t("3ca3"),t("99af"),t("b0c0"),t("1487")),l=t.n(a),r={data:function(){return{loading:!1,demoCodes:['\n        <vxe-virtual-tree\n          resizable\n          show-overflow\n          show-header-overflow\n          row-key\n          ref="xVTree"\n          height="500"\n          :loading="loading"\n          :toolbar-config="{slots: {buttons: \'toolbar_buttons\'}}"\n          :radio-config="{labelField: \'name\'}"\n          :tree-config="{children: \'children\'}">\n          <template v-slot:toolbar_buttons>\n            <vxe-button @click="loadColumnAndData(1000, 5000)">1k列5k条</vxe-button>\n            <vxe-button @click="loadColumnAndData(1000, 10000)">1k列1w条</vxe-button>\n            <vxe-button @click="loadColumnAndData(1000, 20000)">1k列2w条</vxe-button>\n            <vxe-button @click="loadColumnAndData(2000, 10000)">2k列1w条</vxe-button>\n            <vxe-button @click="loadColumnAndData(5000, 5000)">5k列5k条</vxe-button>\n            <vxe-button @click="loadColumnAndData(5000, 10000)">5k列1w条</vxe-button>\n            <vxe-button @click="loadColumnAndData(5000, 20000)">5k列2w条</vxe-button>\n            <vxe-button @click="$refs.xVTree.setAllTreeExpand(true)">展开所有</vxe-button>\n            <vxe-button @click="$refs.xVTree.setAllTreeExpand(false)">收起所有</vxe-button>\n            <vxe-button @click="getRadioEvent">获取选中</vxe-button>\n          </template>\n        </vxe-virtual-tree>\n        ',"\n        export default {\n          data () {\n            return {\n              loading: false\n            }\n          },\n          mounted () {\n            this.loadColumn()\n            this.loadData(500)\n          },\n          methods: {\n            loadData (size) {\n              this.loading = true\n              this.getTreeList(size).then(data => {\n                this.loading = false\n                if (this.$refs.xVTree) {\n                  this.$refs.xVTree.loadData(data)\n                }\n              })\n            },\n            loadColumn (size) {\n              const tableColumn = [\n                { type: 'seq', title: '序号', width: 100 },\n                { type: 'radio', title: 'Name', width: 300, treeNode: true },\n                { field: 'id', title: 'ID', width: 200 }\n              ]\n              for (let index = 0; index < size; index++) {\n                tableColumn.push({\n                  field: 'col' + index,\n                  title: 'col_' + index,\n                  width: 100\n                })\n              }\n              if (this.$refs.xVTree) {\n                this.$refs.xVTree.loadColumn(tableColumn)\n              }\n            },\n            getTreeList (size) {\n              return new Promise(resolve => {\n                // 模拟后台生成树结构\n                setTimeout(() => {\n                  const len1 = size / 2\n                  const len2 = 3\n                  const len3 = 2\n                  const len4 = 2\n                  const len5 = 6\n                  const result = []\n                  const startIndex = 10000\n                  let ketIndex = 0\n                  for (let index1 = 0; index1 < len1; index1++) {\n                    if (ketIndex >= size) {\n                      break\n                    }\n                    const children1 = []\n                    for (let index2 = 0; index2 < len2; index2++) {\n                      if (ketIndex >= size) {\n                        break\n                      }\n                      const children2 = []\n                      for (let index3 = 0; index3 < len3; index3++) {\n                        if (ketIndex >= size) {\n                          break\n                        }\n                        const children3 = []\n                        for (let index4 = 0; index4 < len4; index4++) {\n                          if (ketIndex >= size) {\n                            break\n                          }\n                          const children4 = []\n                          for (let index5 = 0; index5 < len5; index5++) {\n                            if (ketIndex >= size) {\n                              break\n                            }\n                            const item5 = {\n                              id: startIndex + ketIndex++,\n                              name: `name${index1}_${index2}_${index3}_${index4}_${index5}`,\n                              children: []\n                            }\n                            children4.push(item5)\n                          }\n                          const item4 = {\n                            id: startIndex + ketIndex++,\n                            name: `name${index1}_${index2}_${index3}_${index4}`,\n                            children: children4\n                          }\n                          children3.push(item4)\n                        }\n                        const item3 = {\n                          id: startIndex + ketIndex++,\n                          name: `name${index1}_${index2}_${index3}`,\n                          children: children3\n                        }\n                        children2.push(item3)\n                      }\n                      const item2 = {\n                        id: startIndex + ketIndex++,\n                        name: `name${index1}_${index2}`,\n                        children: children2\n                      }\n                      children1.push(item2)\n                    }\n                    const item1 = {\n                      id: startIndex + ketIndex++,\n                      name: `name${index1}`,\n                      children: children1\n                    }\n                    result.push(item1)\n                  }\n                  resolve(result)\n                }, 300)\n              })\n            },\n            getRadioEvent () {\n              const selectRow = this.$refs.xVTree.getRadioRecord()\n              this.$XModal.alert(selectRow ? selectRow.name : null)\n            }\n          }\n        }\n        "]}},mounted:function(){this.loadColumnAndData(100,500),Array.from(this.$el.querySelectorAll("pre code")).forEach((function(n){l.a.highlightBlock(n)}))},methods:{loadColumnAndData:function(n,e){this.loadColumn(n),this.loadData(e)},loadData:function(n){var e=this;this.loading=!0,this.getTreeList(n).then((function(n){e.loading=!1,e.$refs.xVTree&&e.$refs.xVTree.loadData(n)}))},loadColumn:function(n){for(var e=[{type:"seq",title:"序号",width:100},{type:"radio",title:"Name",width:300,treeNode:!0},{field:"id",title:"ID",width:200}],t=0;t<n;t++)e.push({field:"col"+t,title:"col_"+t,width:100});this.$refs.xVTree&&this.$refs.xVTree.loadColumn(e)},getTreeList:function(n){return new Promise((function(e){setTimeout((function(){for(var t=n/2,o=3,i=2,a=2,l=6,r=[],d=1e4,c=0,s=0;s<t;s++){if(c>=n)break;for(var u=[],x=0;x<o;x++){if(c>=n)break;for(var h=[],v=0;v<i;v++){if(c>=n)break;for(var f=[],m=0;m<a;m++){if(c>=n)break;for(var b=[],k=0;k<l;k++){if(c>=n)break;var _={id:d+c++,name:"name".concat(s,"_").concat(x,"_").concat(v,"_").concat(m,"_").concat(k),children:[]};b.push(_)}var p={id:d+c++,name:"name".concat(s,"_").concat(x,"_").concat(v,"_").concat(m),children:b};f.push(p)}var w={id:d+c++,name:"name".concat(s,"_").concat(x,"_").concat(v),children:f};h.push(w)}var C={id:d+c++,name:"name".concat(s,"_").concat(x),children:h};u.push(C)}var g={id:d+c++,name:"name".concat(s),children:u};r.push(g)}e(r)}),300)}))},getRadioEvent:function(){var n=this.$refs.xVTree.getRadioRecord();this.$XModal.alert(n?n.name:null)}}},d=r,c=t("2877"),s=Object(c["a"])(d,o,i,!1,null,null,null);e["default"]=s.exports}}]);