(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0af0da"],{"0d4d":function(e,n,t){"use strict";t.r(n);var a=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[t("p",{staticClass:"tip"},[e._v("可编辑的合并行"),t("br"),t("span",{staticClass:"red"},[e._v("（注："),t("table-api-link",{attrs:{prop:"span-method"}}),e._v(" ，不能用于固定列，合并的逻辑都是自行实现的，该示例仅供参考）")],1)]),t("vxe-toolbar",{scopedSlots:e._u([{key:"buttons",fn:function(){return[t("vxe-button",{on:{click:e.insertEvent}},[e._v("新增")]),t("vxe-button",{on:{click:function(n){return e.$refs.xTable.removeCheckboxRow()}}},[e._v("删除选中")]),t("vxe-button",{on:{click:e.saveEvent}},[e._v("保存")])]},proxy:!0}])}),t("vxe-table",{ref:"xTable",attrs:{border:"",height:"500",loading:e.loading,"span-method":e.rowspanMethod,data:e.tableData,"edit-rules":e.validRules,"edit-config":{trigger:"click",mode:"cell"}}},[t("vxe-table-column",{attrs:{type:"checkbox",width:"60"}}),t("vxe-table-column",{attrs:{field:"key",title:"Key","edit-render":{name:"input",props:{placeholder:"请输入键值"}}}}),t("vxe-table-column",{attrs:{field:"name",title:"Translate","edit-render":{name:"input",props:{placeholder:"请输入翻译的内容"}}}}),t("vxe-table-column",{attrs:{field:"language",title:"Language","edit-render":{name:"$select",options:e.optionList}}})],1),t("p",{staticClass:"demo-code"},[e._v(e._s(e.$t("app.body.button.showCode")))]),t("pre",[e._v("    "),t("code",{staticClass:"xml"},[e._v(e._s(e.demoCodes[0]))]),e._v("\n    "),t("code",{staticClass:"javascript"},[e._v(e._s(e.demoCodes[1]))]),e._v("\n  ")])],1)},s=[],l=(t("d3b7"),t("159b"),t("a630"),t("3ca3"),t("caad"),t("628a")),o=t.n(l),r=t("1487"),i=t.n(r),d={data:function(){return{loading:!1,tableData:[],optionList:[{label:"中文",value:"zh_CN"},{label:"English",value:"en_US"},{label:"Español",value:"es"},{label:"Français",value:"fr_FR"}],validRules:{key:[{required:!0,message:"键值必须填写"}],name:[{required:!0,message:"翻译内容必须填写"}],language:[{required:!0,message:"语言类型必须填写"}]},demoCodes:['\n        <vxe-toolbar>\n          <template v-slot:buttons>\n            <vxe-button @click="insertEvent">新增</vxe-button>\n            <vxe-button @click="$refs.xTable.removeCheckboxRow()">删除选中</vxe-button>\n            <vxe-button @click="saveEvent">保存</vxe-button>\n          </template>\n        </vxe-toolbar>\n\n        <vxe-table\n          border\n          ref="xTable"\n          height="500"\n          :loading="loading"\n          :span-method="rowspanMethod"\n          :data="tableData"\n          :edit-rules="validRules"\n          :edit-config="{trigger: \'click\', mode: \'cell\'}">\n          <vxe-table-column type="checkbox" width="60"></vxe-table-column>\n          <vxe-table-column field="key" title="Key" :edit-render="{name: \'input\', props: {placeholder: \'请输入键值\'}}"></vxe-table-column>\n          <vxe-table-column field="name" title="Translate" :edit-render="{name: \'input\', props: {placeholder: \'请输入翻译的内容\'}}"></vxe-table-column>\n          <vxe-table-column field="language" title="Language" :edit-render="{name: \'$select\', options: optionList}"></vxe-table-column>\n        </vxe-table>\n        ',"\n        export default {\n          data () {\n            return {\n              loading: false,\n              tableData: [],\n              optionList: [\n                { label: '中文', value: 'zh_CN' },\n                { label: 'English', value: 'en_US' },\n                { label: 'Español', value: 'es' },\n                { label: 'Français', value: 'fr_FR' }\n              ],\n              validRules: {\n                key: [\n                  { required: true, message: '键值必须填写' }\n                ],\n                name: [\n                  { required: true, message: '翻译内容必须填写' }\n                ],\n                language: [\n                  { required: true, message: '语言类型必须填写' }\n                ]\n              }\n            }\n          },\n          created () {\n            this.findList()\n          },\n          methods: {\n            findList () {\n              this.loading = true\n              XEAjax.get('/api/i18n/list', { sort: 'key', order: 'asc' }).then(data => {\n                this.tableData = data\n                this.loading = false\n              })\n            },\n            insertEvent () {\n              let record = {}\n              this.$refs.xTable.insert(record)\n                .then(({ row }) => this.$refs.xTable.setActiveCell(row, 'key'))\n            },\n            saveEvent () {\n              let body = this.$refs.xTable.getRecordset()\n              let { insertRecords, removeRecords, updateRecords } = body\n              if (insertRecords.length || removeRecords.length || updateRecords.length) {\n                this.$refs.xTable.validate((errMap) => {\n                  if (errMap) {\n                    this.$XModal.message({ status: 'error', message: '校验不通过！' })\n                  } else {\n                    XEAjax.post('/api/i18n/save', body).then(() => {\n                      this.$XModal.message({ message: '保存成功！', status: 'success' })\n                      this.findList()\n                    }).catch(() => {\n                      this.$XModal.message({ message: '保存失败！', status: 'error' })\n                    })\n                  }\n                })\n              } else {\n                this.$Message.info('数据未改动！')\n              }\n            },\n            // 通用行合并函数（将相同多列数据合并为一行）\n            rowspanMethod ({ row, _rowIndex, column, visibleData }) {\n              let fields = ['key']\n              let cellValue = row[column.property]\n              if (cellValue && fields.includes(column.property)) {\n                let prevRow = visibleData[_rowIndex - 1]\n                let nextRow = visibleData[_rowIndex + 1]\n                if (prevRow && prevRow[column.property] === cellValue) {\n                  return { rowspan: 0, colspan: 0 }\n                } else {\n                  let countRowspan = 1\n                  while (nextRow && nextRow[column.property] === cellValue) {\n                    nextRow = visibleData[++countRowspan + _rowIndex]\n                  }\n                  if (countRowspan > 1) {\n                    return { rowspan: countRowspan, colspan: 1 }\n                  }\n                }\n              }\n            }\n          }\n        }\n        "]}},created:function(){this.findList()},mounted:function(){Array.from(this.$el.querySelectorAll("pre code")).forEach((function(e){i.a.highlightBlock(e)}))},methods:{findList:function(){var e=this;this.loading=!0,o.a.get("/api/i18n/list",{sort:"key",order:"asc"}).then((function(n){e.tableData=n,e.loading=!1}))},insertEvent:function(){var e=this,n={};this.$refs.xTable.insert(n).then((function(n){var t=n.row;return e.$refs.xTable.setActiveCell(t,"key")}))},saveEvent:function(){var e=this,n=this.$refs.xTable.getRecordset(),t=n.insertRecords,a=n.removeRecords,s=n.updateRecords;t.length||a.length||s.length?this.$refs.xTable.validate((function(t){t?e.$XModal.message({status:"error",message:"校验不通过！"}):o.a.post("/api/i18n/save",n).then((function(){e.$XModal.message({message:"保存成功！",status:"success"}),e.findList()})).catch((function(){e.$XModal.message({message:"保存失败！",status:"error"})}))})):this.$Message.info("数据未改动！")},rowspanMethod:function(e){var n=e.row,t=e._rowIndex,a=e.column,s=e.visibleData,l=["key"],o=n[a.property];if(o&&l.includes(a.property)){var r=s[t-1],i=s[t+1];if(r&&r[a.property]===o)return{rowspan:0,colspan:0};var d=1;while(i&&i[a.property]===o)i=s[++d+t];if(d>1)return{rowspan:d,colspan:1}}}}},c=d,u=t("2877"),p=Object(u["a"])(c,a,s,!1,null,null,null);n["default"]=p.exports}}]);